datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String  @id @map("_id")
  username  String  @unique
  email     String  @unique
  avatar                  String?
  cover                   String?
  name                    String?
  surname                 String?
  description             String?
  city                    String?
  school                  String?
  work                    String?
  website                 String?
  createdAt               DateTime    @default(now())
  posts                   Post[]
  comments                Comment[]
  likes                   Like[]
  followers               Follower[]  @relation("UserFollowers")
  followings              Follower[]  @relation("UserFollowings")
  followRequestsSent      FollowRequest[] @relation("FollowRequestsSent")
  followRequestsReceived  FollowRequest[] @relation("FollowRequestsReceived")
  blocks                  Block[]     @relation("BlocksSent")
  blockedBy               Block[]     @relation("BlocksReceived")
  stories                 Story[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  content   String
  createdAt DateTime @default(now())
  comments  Comment[]
  likes     Like[]

  user User @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String
  userId    String

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String
  followingId String

  follower User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowings", fields: [followingId], references: [id])
}

model FollowRequest {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId    String
  receiverId  String

  sender   User @relation("FollowRequestsSent", fields: [senderId], references: [id])
  receiver User @relation("FollowRequestsReceived", fields: [receiverId], references: [id])
}

model Block {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  blockerId   String
  blockedId   String

  blocker User @relation("BlocksSent", fields: [blockerId], references: [id])
  blocked User @relation("BlocksReceived", fields: [blockedId], references: [id])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  content   String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
